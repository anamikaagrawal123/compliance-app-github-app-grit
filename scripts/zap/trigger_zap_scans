#!/usr/bin/env bash
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    CURRENT_DIRECTORY=$(pwd)
    
    # GENERAL NOTE
    # The zap scan scripts assume it is working from ${WORKSPACE} (/workspace/app)
    # Paths are set based on this. For example. If the /workspace/app contains
    # a repo called 'myzap_repo' which contains the zap scripts, the path you specify
    # for the set up steps below should begin with 'myzap_repo/'. 
    # The scripts will automatically prefix these paths with ${WORKSPACE}.
    # By default when an async task starts up, it copies the content of your repo into /workspace/app/one-pipeline-config-repo
    # During the setup you must switch to ${WORKSPACE} and you can specify 'one-pipeline-config-repo' when setting the paths
    # The reason to specify the paths this way, is to allow a git clone command to run, cloning an additional repo into ${WORKSPACE}
    # The user might wish to have a common repo which holds the core zap scripts
    # And have specific scripts in the application repo

    # CLONE REPO
    # Example common repo containing the core zap scripts
    # GIT_TOKEN="$(get_env git-token "")" where git-token is a pipeline param set in the UI
    # git clone "https://${GIT_TOKEN}@github.ibm.com/huayuenh/myzap_repo"
    # set_env "zap-core-scripts" "myzap_repo/scripts/zap/zap_core"


    # ##SCAN SET UP FOR API AND UI##
    
    # SET THE WORKING DIRECTORY
    cd "${WORKSPACE}"

    # For deploying zap to a cluster an api-key and cluster name is required
    # Assumes apikey secret value is stored under pipeline param called "ibmcloud-api-key"
    # This can be updated in the zap-core/setup script

    # SET CLUSTER NAME
    # expects a parameter in the pipeline UI called "cluster-name"
    # can be updated in the zap-core/setup script. Search for IBMCLOUD_IKS_CLUSTER_NAME

    # SET APIKEY FOR CLUSTER DEPLOY
    # expects a parameter in the pipeline UI called "ibmcloud-api-key"
    # again this can be changed in the zap-core/setup script. See IBMCLOUD_API_KEY

    # SEE zap-core/setup for other optional params

    # SET THE CORE ZAP FILES DIRECTORY
    set_env "zap-core-scripts" "one-pipeline-config-repo/scripts/zap/zap_core"

    # SET UP A RESULTS FILTER High, Medium, Low, Informational (Optional). Reommended to filter out Informational
    set_env "filter-options" "Informational"

    # SET UP ZAP API SCAN
    # set the zap api image
    set_env "zap-api-image" "huayuenh/newapi:latest"

    # FLAG FOR RUNNING API SCAN AS DIND default is false
    set_env "zap_dind" "true"

    # set the url of the app to scan
    # reading back the param that was exported in the dynamic-scan setup stage
    export URL
    #URL="$(get_env app-url "http://159.122.183.107:31364")"
    URL="http://159.122.183.107:31364"
    echo "URL ${URL}"
    set_env "target-application-server-url" "${URL}"

    # set the swagger defintion file(s) comma separated if required
    set_env "swagger-definition-files" "one-pipeline-config-repo/definitions/definitions1.json"

    # set an optional custom file to modify the swagger definition before it is sent to be scan
    set_env "zap-api-custom-script" "one-pipeline-config-repo/scripts/zap/zap-custom-scripts/custom-api-script"

    # start the scan
    source one-pipeline-config-repo/scripts/zap/zap_core/run_scan

    # SET UP ZAP UI SCAN 
    # set the zap ui images
    set_env "zap-ui-image" "huayuenh/newscan1:latest"
    set_env "zap-proxy-image" "huayuenh/newscan2:latest"

    # set the url of the app to scan (doesn't need to be set a second time)
    # sample UI tests provided by SCC team
    URL=https://test.cloud.ibm.com/catalog
    set_env "target-application-server-url" "${URL}"

    # set the UI flag. By default it is set to false
    set_env "zap-ui-scan" "true"

    # set the path the directory containing the UI test scripts
    set_env "zap-ui-script-directory" "one-pipeline-config-repo/scripts/zap/zap-ui-test/uiscripts"

    # set the path to a context file if required
    # set_env "context-file" "one-pipeline-config-repo/scripts/zap/zap-ui-test/contextfile/custom-context.context"

    # set an optional custom file to run during the UI set up. See example
    # it might be a requirement to create a script container secrets for the UI tests to import
    set_env "zap-ui-custom-script" "one-pipeline-config-repo/scripts/zap/zap-custom-scripts/custom-ui-script"

    # start the scan
    source one-pipeline-config-repo/scripts/zap/zap_core/run_scan
